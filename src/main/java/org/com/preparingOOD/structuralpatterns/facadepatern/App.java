package org.com.preparingOOD.structuralpatterns.facadepatern;
/**
 * 1. Реалізуй клас `LibraryFacade`, який:
 *     - Знаходить книгу
 *     - Бронює її
 *     - Сповіщає користувача
 * 2. Усередині фасаду використовуй підсистеми:
 *     - `BookInventory`
 *     - `ReservationService`
 *     - `NotificationService`
 * 3. Клієнт взаємодіє лише з `LibraryFacade`
 * 4. Фасад приховує складність взаємодії між модулями
 *
 * **Питання для рефлексії:**
 * 1. Чим Facade відрізняється від Controller?
 *  Це взагалі 2 різні ідеї , ідея контролерра бути межою між юзером та бізне логікою , контролер опрацьовує Data для передачі юзеру.
 *  це також певна абстракція між користувачем та бізнес логікою , але він також має свій код.
 *  Хоче схоже в них ї вони збираю потрібні методи для того щоб поєднати їх в 1 , умовно це як поєднання багато функцій в 1 для відповіді це як f(n) -> a
 * 2. Яка UML-структура патерну Facade?
 * 3. У яких випадках його використання корисне?
 * Коли нам потрібно стоврити абзстракцію яка буде поєднувати бага-то функціоналу в одному классі і розробнику не потрібно буде шукати в багатьох класах методи для того щоб зробити який функціонал.
 * умовно вся логіка знаходиться в 1 facade.
 * 4. Коли цей підхід додає зайву складність?
 *  Коли в нас не бага-то логіки і не є важким поєднати її окремо , або якщо в нас логіка не пов'язана ,то це буде зайвим.
 **/
public class App {
    public static void main(String[] args) {
        LibraryFacade libraryFacade = new LibraryFacade();

        libraryFacade.buyBook();
    }
}
